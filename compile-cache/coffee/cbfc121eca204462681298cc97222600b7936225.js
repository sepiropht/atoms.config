(function() {
  var $, TextEditorView, View, _, _ref;

  _ref = require("atom-space-pen-views"), $ = _ref.$, TextEditorView = _ref.TextEditorView, View = _ref.View;

  _ = require("underscore-plus");

  module.exports = {
    config: {
      fillColorAsBackground: {
        type: 'boolean',
        "default": true
      }
    },
    parseColor: function(color) {
      var alpha, blue, colorObject, fullColor, green, hex, red, shortColor, _ref1;
      hex = function(code) {
        return parseInt(code, 16);
      };
      if (shortColor = color.match(/^#([0-9a-f]{3})$/i)) {
        colorObject = {
          red: hex(shortColor[1].charAt(0)) * 0x11,
          green: hex(shortColor[1].charAt(1)) * 0x11,
          blue: hex(shortColor[1].charAt(2)) * 0x11,
          alpha: 1
        };
        return colorObject;
      }
      if (fullColor = color.match(/^#([0-9a-f]{6})$/i)) {
        colorObject = {
          red: hex(fullColor[1].substr(0, 2)),
          green: hex(fullColor[1].substr(2, 2)),
          blue: hex(fullColor[1].substr(4, 2)),
          alpha: 1
        };
        return colorObject;
      }
      _ref1 = color.split(",").map(function(val) {
        return parseFloat(val.trim());
      }), red = _ref1[0], green = _ref1[1], blue = _ref1[2], alpha = _ref1[3];
      if (red >= 0 && green >= 0 && blue >= 0) {
        if (alpha === NaN) {
          alpha = 1;
        }
        if (alpha === void 0) {
          alpha = 1;
        }
        return {
          red: red,
          green: green,
          blue: blue,
          alpha: alpha
        };
      }
      return {
        raw: color
      };
    },
    inverseColor: function(color) {
      var blue, brightness, green, red;
      if (color.raw) {
        return "#fff";
      }
      red = color.red, green = color.green, blue = color.blue;
      brightness = Math.sqrt(red * red * .241 + green * green * .691 + blue * blue * .068);
      if (brightness < 130) {
        return "#fff";
      } else {
        return "#000";
      }
    },
    activate: function(state) {
      return atom.workspace.observeTextEditors((function(_this) {
        return function(editor) {
          var compile;
          compile = _this.compile.bind(_this, editor);
          editor.onDidStopChanging(compile);
          return _.defer(compile);
        };
      })(this));
    },
    compile: function(_editor, context) {
      var fill, line, shadow, size, view;
      view = $(atom.views.getView(_editor));
      shadow = $(view[0].shadowRoot);
      fill = atom.config.get("webbox-color.fillColorAsBackground");
      size = atom.config.get("editor.fontSize");
      line = atom.config.get("editor.lineHeight");
      return shadow.find(".source.css .color, .source.stylus .color, .source.less .color, .source.sass .color, .source.velocity .quoted").each((function(_this) {
        return function(i, el) {
          var $el, bgc, color, colorBox, curLine, text;
          $el = $(el);
          text = $el.text().trim().replace(/\"|\,/gi, "");
          color = _this.parseColor(text);
          if (!color.raw) {
            bgc = "rgba(" + color.red + ", " + color.green + ", " + color.blue + ", " + color.alpha + ")";
          } else {
            bgc = color.raw;
          }
          if ($el.data("color") !== bgc) {
            $el.data("color", bgc);
            if (fill) {
              $el.addClass("color-box on-background");
              return $el.css({
                backgroundColor: bgc,
                color: _this.inverseColor(color)
              });
            } else {
              curLine = $el.closest(".line");
              colorBox = $('<span/>');
              colorBox.addClass("color-box on-line-end");
              colorBox.css({
                backgroundColor: bgc,
                width: (size * line) - 4,
                height: (size * line) - 4
              });
              return curLine.append(colorBox);
            }
          }
        };
      })(this));
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvd2lsbGlhbS8uYXRvbS9wYWNrYWdlcy93ZWJib3gtY29sb3IvbGliL2NvbG9yLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSxnQ0FBQTs7QUFBQSxFQUFBLE9BQTRCLE9BQUEsQ0FBUSxzQkFBUixDQUE1QixFQUFDLFNBQUEsQ0FBRCxFQUFJLHNCQUFBLGNBQUosRUFBb0IsWUFBQSxJQUFwQixDQUFBOztBQUFBLEVBQ0EsQ0FBQSxHQUFJLE9BQUEsQ0FBUSxpQkFBUixDQURKLENBQUE7O0FBQUEsRUFHQSxNQUFNLENBQUMsT0FBUCxHQUVFO0FBQUEsSUFBQSxNQUFBLEVBQ0U7QUFBQSxNQUFBLHFCQUFBLEVBQ0U7QUFBQSxRQUFBLElBQUEsRUFBTSxTQUFOO0FBQUEsUUFDQSxTQUFBLEVBQVMsSUFEVDtPQURGO0tBREY7QUFBQSxJQUtBLFVBQUEsRUFBWSxTQUFDLEtBQUQsR0FBQTtBQUVWLFVBQUEsdUVBQUE7QUFBQSxNQUFBLEdBQUEsR0FBTSxTQUFDLElBQUQsR0FBQTtlQUFVLFFBQUEsQ0FBUyxJQUFULEVBQWUsRUFBZixFQUFWO01BQUEsQ0FBTixDQUFBO0FBRUEsTUFBQSxJQUFHLFVBQUEsR0FBYSxLQUFLLENBQUMsS0FBTixDQUFZLG1CQUFaLENBQWhCO0FBQ0UsUUFBQSxXQUFBLEdBQ0U7QUFBQSxVQUFBLEdBQUEsRUFBTyxHQUFBLENBQUksVUFBVyxDQUFBLENBQUEsQ0FBRSxDQUFDLE1BQWQsQ0FBcUIsQ0FBckIsQ0FBSixDQUFBLEdBQStCLElBQXRDO0FBQUEsVUFDQSxLQUFBLEVBQU8sR0FBQSxDQUFJLFVBQVcsQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUFkLENBQXFCLENBQXJCLENBQUosQ0FBQSxHQUErQixJQUR0QztBQUFBLFVBRUEsSUFBQSxFQUFPLEdBQUEsQ0FBSSxVQUFXLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBZCxDQUFxQixDQUFyQixDQUFKLENBQUEsR0FBK0IsSUFGdEM7QUFBQSxVQUdBLEtBQUEsRUFBTyxDQUhQO1NBREYsQ0FBQTtBQUtBLGVBQU8sV0FBUCxDQU5GO09BRkE7QUFVQSxNQUFBLElBQUcsU0FBQSxHQUFZLEtBQUssQ0FBQyxLQUFOLENBQVksbUJBQVosQ0FBZjtBQUNFLFFBQUEsV0FBQSxHQUNFO0FBQUEsVUFBQSxHQUFBLEVBQU8sR0FBQSxDQUFJLFNBQVUsQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUFiLENBQW9CLENBQXBCLEVBQXNCLENBQXRCLENBQUosQ0FBUDtBQUFBLFVBQ0EsS0FBQSxFQUFPLEdBQUEsQ0FBSSxTQUFVLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBYixDQUFvQixDQUFwQixFQUFzQixDQUF0QixDQUFKLENBRFA7QUFBQSxVQUVBLElBQUEsRUFBTyxHQUFBLENBQUksU0FBVSxDQUFBLENBQUEsQ0FBRSxDQUFDLE1BQWIsQ0FBb0IsQ0FBcEIsRUFBc0IsQ0FBdEIsQ0FBSixDQUZQO0FBQUEsVUFHQSxLQUFBLEVBQU8sQ0FIUDtTQURGLENBQUE7QUFLQSxlQUFPLFdBQVAsQ0FORjtPQVZBO0FBQUEsTUFrQkEsUUFBNEIsS0FBSyxDQUFDLEtBQU4sQ0FBWSxHQUFaLENBQWdCLENBQUMsR0FBakIsQ0FBcUIsU0FBQyxHQUFELEdBQUE7ZUFBUSxVQUFBLENBQVcsR0FBRyxDQUFDLElBQUosQ0FBQSxDQUFYLEVBQVI7TUFBQSxDQUFyQixDQUE1QixFQUFDLGNBQUQsRUFBTSxnQkFBTixFQUFhLGVBQWIsRUFBbUIsZ0JBbEJuQixDQUFBO0FBbUJBLE1BQUEsSUFBRyxHQUFBLElBQU8sQ0FBUCxJQUFhLEtBQUEsSUFBUyxDQUF0QixJQUE0QixJQUFBLElBQVEsQ0FBdkM7QUFDRSxRQUFBLElBQWEsS0FBQSxLQUFTLEdBQXRCO0FBQUEsVUFBQSxLQUFBLEdBQVEsQ0FBUixDQUFBO1NBQUE7QUFDQSxRQUFBLElBQWEsS0FBQSxLQUFTLE1BQXRCO0FBQUEsVUFBQSxLQUFBLEdBQVEsQ0FBUixDQUFBO1NBREE7QUFFQSxlQUFPO0FBQUEsVUFBQyxLQUFBLEdBQUQ7QUFBQSxVQUFNLE9BQUEsS0FBTjtBQUFBLFVBQWEsTUFBQSxJQUFiO0FBQUEsVUFBbUIsT0FBQSxLQUFuQjtTQUFQLENBSEY7T0FuQkE7YUF3QkE7QUFBQSxRQUFBLEdBQUEsRUFBSyxLQUFMO1FBMUJVO0lBQUEsQ0FMWjtBQUFBLElBaUNBLFlBQUEsRUFBYyxTQUFDLEtBQUQsR0FBQTtBQUVaLFVBQUEsNEJBQUE7QUFBQSxNQUFBLElBQUcsS0FBSyxDQUFDLEdBQVQ7QUFDRSxlQUFPLE1BQVAsQ0FERjtPQUFBO0FBQUEsTUFHQyxZQUFBLEdBQUQsRUFBTSxjQUFBLEtBQU4sRUFBYSxhQUFBLElBSGIsQ0FBQTtBQUFBLE1BSUEsVUFBQSxHQUFhLElBQUksQ0FBQyxJQUFMLENBQ1gsR0FBQSxHQUFNLEdBQU4sR0FBWSxJQUFaLEdBQ0EsS0FBQSxHQUFRLEtBQVIsR0FBZ0IsSUFEaEIsR0FFQSxJQUFBLEdBQU8sSUFBUCxHQUFjLElBSEgsQ0FKYixDQUFBO0FBU0EsTUFBQSxJQUFHLFVBQUEsR0FBYSxHQUFoQjtlQUF5QixPQUF6QjtPQUFBLE1BQUE7ZUFBcUMsT0FBckM7T0FYWTtJQUFBLENBakNkO0FBQUEsSUE4Q0EsUUFBQSxFQUFVLFNBQUMsS0FBRCxHQUFBO2FBQ1IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBZixDQUFrQyxDQUFBLFNBQUEsS0FBQSxHQUFBO2VBQUEsU0FBQyxNQUFELEdBQUE7QUFDaEMsY0FBQSxPQUFBO0FBQUEsVUFBQSxPQUFBLEdBQVUsS0FBQyxDQUFBLE9BQU8sQ0FBQyxJQUFULENBQWMsS0FBZCxFQUFpQixNQUFqQixDQUFWLENBQUE7QUFBQSxVQUVBLE1BQU0sQ0FBQyxpQkFBUCxDQUF5QixPQUF6QixDQUZBLENBQUE7aUJBR0EsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxPQUFSLEVBSmdDO1FBQUEsRUFBQTtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBbEMsRUFEUTtJQUFBLENBOUNWO0FBQUEsSUFxREEsT0FBQSxFQUFTLFNBQUMsT0FBRCxFQUFVLE9BQVYsR0FBQTtBQUNQLFVBQUEsOEJBQUE7QUFBQSxNQUFBLElBQUEsR0FBTyxDQUFBLENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFYLENBQW1CLE9BQW5CLENBQUYsQ0FBUCxDQUFBO0FBQUEsTUFDQSxNQUFBLEdBQVMsQ0FBQSxDQUFFLElBQUssQ0FBQSxDQUFBLENBQUUsQ0FBQyxVQUFWLENBRFQsQ0FBQTtBQUFBLE1BRUEsSUFBQSxHQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBWixDQUFnQixvQ0FBaEIsQ0FGUCxDQUFBO0FBQUEsTUFHQSxJQUFBLEdBQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFaLENBQWdCLGlCQUFoQixDQUhQLENBQUE7QUFBQSxNQUlBLElBQUEsR0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQVosQ0FBZ0IsbUJBQWhCLENBSlAsQ0FBQTthQU1BLE1BQU0sQ0FBQyxJQUFQLENBQVksK0dBQVosQ0FDRSxDQUFDLElBREgsQ0FDUSxDQUFBLFNBQUEsS0FBQSxHQUFBO2VBQUEsU0FBQyxDQUFELEVBQUksRUFBSixHQUFBO0FBQ0osY0FBQSx3Q0FBQTtBQUFBLFVBQUEsR0FBQSxHQUFNLENBQUEsQ0FBRSxFQUFGLENBQU4sQ0FBQTtBQUFBLFVBQ0EsSUFBQSxHQUFPLEdBQUcsQ0FBQyxJQUFKLENBQUEsQ0FBVSxDQUFDLElBQVgsQ0FBQSxDQUFpQixDQUFDLE9BQWxCLENBQTBCLFNBQTFCLEVBQW9DLEVBQXBDLENBRFAsQ0FBQTtBQUFBLFVBRUEsS0FBQSxHQUFRLEtBQUMsQ0FBQSxVQUFELENBQVksSUFBWixDQUZSLENBQUE7QUFJQSxVQUFBLElBQUEsQ0FBQSxLQUFZLENBQUMsR0FBYjtBQUNFLFlBQUEsR0FBQSxHQUFPLE9BQUEsR0FBTyxLQUFLLENBQUMsR0FBYixHQUFpQixJQUFqQixHQUFxQixLQUFLLENBQUMsS0FBM0IsR0FBaUMsSUFBakMsR0FBcUMsS0FBSyxDQUFDLElBQTNDLEdBQWdELElBQWhELEdBQW9ELEtBQUssQ0FBQyxLQUExRCxHQUFnRSxHQUF2RSxDQURGO1dBQUEsTUFBQTtBQUdFLFlBQUEsR0FBQSxHQUFNLEtBQUssQ0FBQyxHQUFaLENBSEY7V0FKQTtBQVNBLFVBQUEsSUFBRyxHQUFHLENBQUMsSUFBSixDQUFTLE9BQVQsQ0FBQSxLQUF1QixHQUExQjtBQUNFLFlBQUEsR0FBRyxDQUFDLElBQUosQ0FBUyxPQUFULEVBQWtCLEdBQWxCLENBQUEsQ0FBQTtBQUVBLFlBQUEsSUFBRyxJQUFIO0FBQ0UsY0FBQSxHQUFHLENBQUMsUUFBSixDQUFhLHlCQUFiLENBQUEsQ0FBQTtxQkFDQSxHQUFHLENBQUMsR0FBSixDQUNFO0FBQUEsZ0JBQUEsZUFBQSxFQUFpQixHQUFqQjtBQUFBLGdCQUNBLEtBQUEsRUFBTyxLQUFDLENBQUEsWUFBRCxDQUFjLEtBQWQsQ0FEUDtlQURGLEVBRkY7YUFBQSxNQUFBO0FBTUUsY0FBQSxPQUFBLEdBQVUsR0FBRyxDQUFDLE9BQUosQ0FBWSxPQUFaLENBQVYsQ0FBQTtBQUFBLGNBRUEsUUFBQSxHQUFXLENBQUEsQ0FBRSxTQUFGLENBRlgsQ0FBQTtBQUFBLGNBR0EsUUFBUSxDQUFDLFFBQVQsQ0FBa0IsdUJBQWxCLENBSEEsQ0FBQTtBQUFBLGNBSUEsUUFBUSxDQUFDLEdBQVQsQ0FDRTtBQUFBLGdCQUFBLGVBQUEsRUFBaUIsR0FBakI7QUFBQSxnQkFDQSxLQUFBLEVBQU8sQ0FBQyxJQUFBLEdBQU8sSUFBUixDQUFBLEdBQWdCLENBRHZCO0FBQUEsZ0JBRUEsTUFBQSxFQUFRLENBQUMsSUFBQSxHQUFPLElBQVIsQ0FBQSxHQUFnQixDQUZ4QjtlQURGLENBSkEsQ0FBQTtxQkFRQSxPQUFPLENBQUMsTUFBUixDQUFlLFFBQWYsRUFkRjthQUhGO1dBVkk7UUFBQSxFQUFBO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQURSLEVBUE87SUFBQSxDQXJEVDtHQUxGLENBQUE7QUFBQSIKfQ==

//# sourceURL=/home/william/.atom/packages/webbox-color/lib/color.coffee

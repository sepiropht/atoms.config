function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _libMain = require('../lib/main');

var _libMain2 = _interopRequireDefault(_libMain);

var _path = require('path');

var path = _interopRequireWildcard(_path);

'use babel';

var goodPath = path.join(__dirname, 'fixtures', 'files', 'good.js');
var badPath = path.join(__dirname, 'fixtures', 'files', 'bad.js');
var emptyPath = path.join(__dirname, 'fixtures', 'files', 'empty.js');
var fixPath = path.join(__dirname, 'fixtures', 'files', 'fix.js');
var importingpath = path.join(__dirname, 'fixtures', 'import-resolution', 'nested', 'importing.js');
var ignoredPath = path.join(__dirname, 'fixtures', 'eslintignore', 'ignored.js');

describe('The eslint provider for Linter', function () {
  var _require = require('../lib/helpers');

  var spawnWorker = _require.spawnWorker;

  var worker = spawnWorker();
  var lint = _libMain2['default'].provideLinter.call(worker).lint;

  beforeEach(function () {
    atom.config.set('linter-eslint.disableFSCache', false);
    atom.config.set('linter-eslint.disableEslintIgnore', true);
    waitsForPromise(function () {
      return atom.packages.activatePackage('language-javascript').then(function () {
        return atom.workspace.open(goodPath);
      });
    });
  });

  describe('checks bad.js and', function () {
    var editor = null;
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(badPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds at least one message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages.length).toBeGreaterThan(0);
        });
      });
    });

    it('verifies that message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBeDefined();
          expect(messages[0].type).toEqual('Error');
          expect(messages[0].html).not.toBeDefined();
          expect(messages[0].text).toBeDefined();
          expect(messages[0].text).toEqual('\'foo\' is not defined.');
          expect(messages[0].filePath).toBeDefined();
          expect(messages[0].filePath).toMatch(/.+spec[\\\/]fixtures[\\\/]files[\\\/]bad\.js$/);
          expect(messages[0].range).toBeDefined();
          expect(messages[0].range.length).toEqual(2);
          expect(messages[0].range).toEqual([[0, 0], [0, 9]]);
          expect(messages[0].hasOwnProperty('fix')).toBeFalsy();
        });
      });
    });
  });

  it('finds nothing wrong with an empty file', function () {
    waitsForPromise(function () {
      return atom.workspace.open(emptyPath).then(function (editor) {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(0);
        });
      });
    });
  });

  it('finds nothing wrong with a valid file', function () {
    waitsForPromise(function () {
      return atom.workspace.open(goodPath).then(function (editor) {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(0);
        });
      });
    });
  });

  it('reports the fixes for fixable errors', function () {
    waitsForPromise(function () {
      return atom.workspace.open(fixPath).then(function (editor) {
        return lint(editor);
      }).then(function (messages) {
        expect(messages[0].fix.range).toEqual([[0, 11], [0, 12]]);
        expect(messages[0].fix.newText).toEqual('');

        expect(messages[1].fix.range).toEqual([[2, 1], [2, 1]]);
        expect(messages[1].fix.newText).toEqual(' ');
      });
    });
  });

  describe('when resolving import paths using eslint-plugin-import', function () {
    it('correctly resolves imports from parent', function () {
      waitsForPromise(function () {
        return atom.workspace.open(importingpath).then(function (editor) {
          return lint(editor).then(function (messages) {
            expect(messages.length).toEqual(0);
          });
        });
      });
    });
  });

  describe('when a file is specified in an .eslintignore file', function () {
    beforeEach(function () {
      atom.config.set('linter-eslint.disableEslintIgnore', false);
    });
    it('will not give warnings for the file', function () {
      waitsForPromise(function () {
        return atom.workspace.open(ignoredPath).then(function (editor) {
          return lint(editor).then(function (messages) {
            expect(messages.length).toEqual(0);
          });
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/william/.atom/packages/linter-eslint/spec/linter-eslint-spec.js

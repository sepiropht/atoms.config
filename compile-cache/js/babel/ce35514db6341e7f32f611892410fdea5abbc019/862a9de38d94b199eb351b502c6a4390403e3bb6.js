Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.enableAutohide = enableAutohide;
exports.disableAutohide = disableAutohide;
exports.isAutohideEnabled = isAutohideEnabled;
exports.toggleAutohide = toggleAutohide;
exports.updateTreeView = updateTreeView;
exports.updateTriggerArea = updateTriggerArea;
exports.showTreeView = showTreeView;
exports.hideTreeView = hideTreeView;
exports.isTreeViewVisible = isTreeViewVisible;
exports.toggleTreeView = toggleTreeView;
exports.resizeTreeView = resizeTreeView;
exports.storeFocusedElement = storeFocusedElement;
exports.clearFocusedElement = clearFocusedElement;
exports.restoreFocus = restoreFocus;
exports.focusTreeView = focusTreeView;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

require('object-assign-shim');

var _atom = require('atom');

var _mainJs = require('./main.js');

var _commandsJs = require('./commands.js');

var _commandsJs2 = _interopRequireDefault(_commandsJs);

var _hoverEventsJs = require('./hover-events.js');

var _clickEventsJs = require('./click-events.js');

var _touchEventsJs = require('./touch-events.js');

var _pinViewJs = require('./pin-view.js');

var _pinViewJs2 = _interopRequireDefault(_pinViewJs);

var _configJs = require('./config.js');

var _configJs2 = _interopRequireDefault(_configJs);

var _utilsJs = require('./utils.js');

'use babel';

function logError(error) {
  atom.notifications.addError('autohide-tree-view: ' + error.message);
  console.error(error); // eslint-disable-line no-console
}

var disposables;

function enableAutohide() {
  if (disposables) return Promise.resolve();
  _mainJs.treeViewEl.setAttribute('data-autohide', '');
  _mainJs.treeViewEl.appendChild(eventTriggerArea);
  _pinViewJs2['default'].deactivate();
  // start with pushEditor = true for a nicer animation
  updateTreeView(true);
  hideTreeView().then(function () {
    updateTreeView();
    handleEvents();
  }, logError);
}

function disableAutohide() {
  if (!disposables) return Promise.resolve();
  disposables.dispose();
  disposables = null;
  // the stylesheet will be removed before the animation is finished
  // which will reset the minWidth to 100px
  _mainJs.treeViewEl.style.minWidth = '0px';
  var isVisible = isTreeViewVisible();
  var panel = atom.views.getView(_mainJs.treeView.panel);
  updateTreeView(_configJs2['default'].pushEditor || !isVisible);
  return (isVisible ? animate(_mainJs.treeViewEl.clientWidth, 0, panel) : showTreeView()).then(function () {
    _mainJs.treeViewEl.removeAttribute('data-autohide');
    Object.assign(_mainJs.treeViewEl.style, { position: '', height: '', minWidth: '' });
    panel.style.width = '';
  }, logError);
}

function isAutohideEnabled() {
  return !!disposables;
}

function toggleAutohide() {
  return !!disposables ? disableAutohide() : enableAutohide();
}

function handleEvents() {
  disposables = new _atom.CompositeDisposable((0, _commandsJs2['default'])(), (0, _configJs.observeConfig)(), (0, _utilsJs.domListener)(_mainJs.treeViewEl, 'click', function (event) {
    if (event.button == 0) resizeTreeView();
  }, { delegationTarget: '.entry.directory' }), (0, _utilsJs.domListener)(_mainJs.treeViewEl, 'click', function (event) {
    if (event.button == 0) var disposable = atom.workspace.onDidChangeActivePaneItem(function (paneItem) {
      storeFocusedElement(atom.views.getView(paneItem));
      disposable.dispose();
    });
  }, { useCapture: true, delegationTarget: '.entry.file' }), (0, _utilsJs.domListener)(document.body, 'focus', function () {
    if (isTreeViewVisible()) hideTreeView();
  }, { delegationTarget: 'atom-text-editor' }), new _atom.Disposable(function () {
    (0, _hoverEventsJs.disableHoverEvents)();
    (0, _clickEventsJs.disableClickEvents)();
    (0, _touchEventsJs.disableTouchEvents)();
    _pinViewJs2['default'].activate();
  }));
}

function updateTreeView() {
  var pushEditor = arguments.length <= 0 || arguments[0] === undefined ? _configJs2['default'].pushEditor : arguments[0];

  var panel = atom.views.getView(_mainJs.treeView.panel);
  _mainJs.treeViewEl.style.position = pushEditor ? '' : 'absolute';
  panel.style.width = pushEditor ? '' : _configJs2['default'].minWidth + 'px';
}

// area on which hover and click events trigger
var eventTriggerArea = document.createElement('div');
exports.eventTriggerArea = eventTriggerArea;
eventTriggerArea.classList.add('tree-view-autohide-trigger-area');

function updateTriggerArea() {
  var triggerWidth = Math.max(1, _configJs2['default'].minWidth, _configJs2['default'].triggerAreaSize);
  eventTriggerArea.style.minWidth = triggerWidth + 'px';
}

var visible = false;

// shows the tree view

function showTreeView() {
  var delay = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
  var shouldDisableHoverEvents = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

  visible = true;
  // disable hover events on the tree view when this
  // show is not triggered by a hover event
  if (shouldDisableHoverEvents && (0, _hoverEventsJs.isHoverEventsEnabled)()) disposables.add((0, _hoverEventsJs.disableHoverEventsUntilBlur)());
  // keep a reference to the currently focused element
  // so we can restore focus when the tree view will hide
  storeFocusedElement();
  return animate((0, _utilsJs.getContentWidth)(), delay).then(function (hasFinished) {
    // make sure the hover area doesn't block tree items
    eventTriggerArea.style.pointerEvents = 'none';
    // focus the tree view if the animation finished
    if (hasFinished) focusTreeView();
    return hasFinished;
  });
}

// hides the tree view

function hideTreeView() {
  var delay = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

  visible = false;
  eventTriggerArea.style.pointerEvents = '';
  return animate(_configJs2['default'].minWidth, delay).then(function (hasFinished) {
    if (hasFinished) {
      // focus the element that had focus when show() was triggered
      restoreFocus();
      // again because sometimes a show() ends after a hide() starts
      eventTriggerArea.style.pointerEvents = '';
    }
    return hasFinished;
  });
}

function isTreeViewVisible() {
  return visible;
}

// toggles the tree view

function toggleTreeView() {
  var delay = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

  return visible ? hideTreeView(delay) : showTreeView(delay);
}

// resizes the tree view to fit the content

function resizeTreeView() {
  return visible ? showTreeView(0, false) : hideTreeView();
}

var currentAnimation = null;

// the animation function returns a promise that resolves with 'true'
// if the animation finished, or with 'false' if it was cancelled
function animate(targetWidth, delay) {
  var element = arguments.length <= 2 || arguments[2] === undefined ? _mainJs.treeViewEl : arguments[2];

  var initialWidth = element.clientWidth;
  // duration = 0 if animationSpeed == 0
  var animationSpeed = _configJs2['default'].animationSpeed || Infinity;
  var duration = Math.abs(targetWidth - initialWidth) / animationSpeed;
  // cancel any current animation and
  // immediately trigger this animation
  if (currentAnimation && currentAnimation.playState != 'finished') {
    currentAnimation.cancel();
    delay = 0;
  }

  return new Promise(function (resolve) {
    // cache the current animationPlayer so we can
    // cancel it as soon as another animation begins
    var animation = currentAnimation = element.animate([{ width: initialWidth }, { width: targetWidth }], { duration: duration, delay: delay });

    animation.addEventListener('finish', function onfinish() {
      animation.removeEventListener('finish', onfinish);
      // if cancelled, resolve with false
      if (animation.playState != 'finished') return resolve(false);

      // prevent tree view from resetting its width to initialWidth
      element.style.width = targetWidth + 'px';
      currentAnimation = null;
      resolve(true);
    });
  })['catch'](logError);
}

// functions that deal with focusing the right
// element at the right time

var focusedElement;

// cache the element that currently has focus

function storeFocusedElement() {
  var el = arguments.length <= 0 || arguments[0] === undefined ? document.activeElement : arguments[0];

  if (!(0, _utilsJs.isChildOf)(el, _mainJs.treeViewEl.parentNode)) focusedElement = el;
}

// clear the reference to the focusedElement. useful
// when we want to invalidate the next restoreFocus

function clearFocusedElement() {
  focusedElement = null;
}

// restores focus on focusedElement

function restoreFocus() {
  // only restore focus if tree view has focus
  if (!focusedElement || !(0, _utilsJs.isChildOf)(document.activeElement, _mainJs.treeViewEl)) return;
  if (typeof focusedElement.focus == 'function') focusedElement.focus();
  clearFocusedElement();
}

// focus the tree view with some logic around it to cancel

function focusTreeView() {
  // don't focus if a modal panel has focus
  // because they tend to close when they lose focus
  if ((0, _utilsJs.isChildOf)(document.activeElement, 'atom-panel.modal')) return;

  _mainJs.treeView.focus();
}
//# sourceMappingURL=data:application/json;base64,